record имя-записи (список-компонентов) {В списке компонентов определяются данные, которые будут храниться в записи.
// необязательные операторы тела
}
данные хранятся в закрытых финальных полях и предоставляются только методы получения. Данные являются неизменяемыми.
record Item(String name, int itemNum, double price) {}
        Item myItem = new Item("Hammer", 2534, 100);

    канонический конструктор записи:
Чтобы сделать собственный канонический конструктор, просто работайте как с обычным конструктором, указав имя записи и
список параметров. Для такого конструктора типы и имена параметров обязаны совпадать с указанными в объявлении записи
Так же после завершения конструктора каждый компонент должен быть инициализирован. Конструктор должен быть, как минимум,
таким же доступным, как изначально. Конструктор не может быть обобщенным и не может включать конструкцию throws
record Item(String name, int itemNum, double price) { //создание record
    public Item(String name, int itemNum, double price) { //каноничный public конструктор
        this.name = name+"(MyWatermark)";
        this.itemNum = itemNum; this.price = price; //каждый компонент инициализирован
    }
}

    Компактный канонический конструктор объявляется за счет указания имени записи, но без параметров:
внутри компактного конструктора можно изменить один или несколько аргументов до того, как их значения будут присвоены
компонентам записи. Можно сгенерировать исключение в случае возникновения ошибки или выполнить любую другую процедуру
record Item(String name, int itemNum, double price) {
    public Item { //компактный каноничный public конструктор
        name = name+"(MyWatermark)";
    }
}

    Объявление неканонического конструктора:
Основное требование это чтобы любой неканонический конструктор сначала вызывал другой конструктор в записи через this.
Неканонический конструктор позволяет создавать записи для особых случаев.
record Item(String name, int itemNum, double price) {
    static double pricePending = -1;
    public Item(String name, int itemNum, String price){ //создаем неканонический конструктор с price типа String
        this(name, itemNum, Double.parseDouble(price)); //вызываем стоковый конструктор и преобразуем String в double
    }
}

Item определен метод по имени DiscountPrice ( ) , который возвращает цену товара со скидкой на указанный процент. При
таком подходе встроенный метод получения price ( ) не модифицируется, что сохраняет неизменяемость. Если необходимо
значение со скидкой, тогда вместо него вызывается DiscountPrice().
record Item(String name, int itemNum, double price) (
...
    double discountPrice(double percentage) {
        return price - (price * percentage / 100.0);
    }
}