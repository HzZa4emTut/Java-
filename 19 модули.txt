    модуль эта группа пакетов и ресурсов, на которые можно коллективно ссылаться по имени модуля Модули также позволяют
контролировать то, какие части модуля доступны другим модулям, а какие нет. В объявлении модуля указывается имя модуля
и определяется отношение модуля и его пакетов с другими модулями
    requires имя-модуля; текущий модуль читает модуль, указанный в операторе requires оператор requires позволяет
гарантировать, что программа имеет доступ к модулям, в которых она нуждается.
    exports имя-пакета; Когда модуль экспортирует пакет, он делает все открытые и защищенные типы в пакете доступными
другим модулям. Кроме того, открытые и защищенные члены этих типов тоже доступны. Однако если пакет внутри модуля не
экспортируется, то он является закрытым для этого модуля, включая все его открытые типы. Если класс объявлен как public
в пакете, но пакет не экспортируется явно оператором exports, то такой класс не будет доступен остальным модулям.
Открытые и защищенные типы пакета, независимо от того, экспортированы они или нет, всегда доступны внутри модуля
данного пакета. Оператор exports просто делает их доступными внешним модулям.
    exports имя-пакета to имена-модулей; в to указывается список из одного или нескольких модулей, которые имеют доступ
к экспортируемому пакету
    requires transitive С; Теперь модуль затребован как транзитивный. После внесения такого изменения любой модуль,
который зависит от В, будет также автоматически зависеть от С

    Служба в Java это программа, функциональность которой определяется интерфейсом или абстрактным классом. Конкретная
реализация службы предоставляется поставщиком службы. Поставщики служб поддерживаются обобщенным классом ServiceLoader
class ServiceLoader<S> //Поставщики служб загружаются с помощью метода load () например:
public static <S> ServiceLoader<S> load(Class <S> тип-службы) В тип-службы указывается объект Class для нужного типа.
Получить экземпляр Class можно с использованием литерала класса: имя-класса.class
Модуль указывает, что он предоставляет службу, с помощью оператора provides. Модуль отражает, что ему требуется служба,
посредством оператора uses. Специфический тип поставщика службы объявляется с применением with. Когда они используются
все вместе, то позволяют задать модуль, предоставляющий службу, модуль, который нуждается в этой службе, и конкретную
реализацию самой службы. provides тип-службы with типы-реализаций; uses тип-службы;
Понадобятся два интерфейса, связанных со службами. Один задает форму действия, а другой указывает форму поставщика
этого действия.

    Можно разрешить доступ во время выполнения ко всем пакетам в модуле вне зависимости от того, экспортируется пакет
или нет создавая открытый модуль, который объявляется за счет помещения перед ключевым словом module модификатора open.
Открытый модуль разрешает доступ к типам из всех его пакетов (на этапе компиляции доступны только те пакеты, которые
экспортируются явно) модификатор open влияет только на доступность во время выполнения. В модуле можно открыть
конкретный пакет для доступа во время выполнения со стороны других модулей и механизма рефлексии, с помощью opens
opens имя-пакета; также можно добавлять конструкцию to со списком модулей, для которых открывается пакет.

    Следующий оператор указывает, что модуль требуется на этапе компиляции, но не во время выполнения:
requires static mymod; добавление static делает mymod необязательным во время выполнения
